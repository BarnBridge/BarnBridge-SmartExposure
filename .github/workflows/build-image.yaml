name: Build Docker image

on:
  push:
    branches:
      - dev.q.xyz

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository code
      uses: actions/checkout@v2

    - name: Notify Slack
      if: success()
      id: slack
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN_QXYZ_DEV }}
      uses: slackapi/slack-github-action@v1.15.0
      with:
        channel-id: q-xyz-cicd
        slack-message: ":pepegalight: STARTED BarnBridge-SmartExposure image build"

    - name: Set version
      id: vars
      run: echo "::set-output name=version::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_QXYZ_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_QXYZ_DEV }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag and push the image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: q-xyz-dev-smartexposure-internal
        IMAGE_TAG: ${{ steps.vars.outputs.version }}
          #if: ${{ github.ref == 'refs/heads/main' }}    
      run: |
        docker build \
          -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}    \
          ${GITHUB_WORKSPACE}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}

        #- name: If branch is not main, only build and not push
        #if: ${{ github.ref != 'refs/heads/main' }}
        #env:
        #ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #ECR_REPOSITORY: barnbridge-smartexposure-internal
        #IMAGE_TAG: ${{ steps.vars.outputs.version }}
        #run: |
        #docker build \
        #  -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}    \
        #  ${GITHUB_WORKSPACE}

    - name: Echo IMAGE_TAG
      env:
        IMAGE_TAG: ${{ steps.vars.outputs.version }}
      run: |
        echo "Version to set in deployment manifests: ${IMAGE_TAG}"

    - name: Notify Slack success
      if: success()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN_QXYZ_DEV }}
      uses: slackapi/slack-github-action@v1.15.0
      with:
        channel-id: q-xyz-cicd
        slack-message: ":white_check_mark: ${{ env.IMAGE_TAG }}"

    - name: Notify Slack failure
      if: failure()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN_QXYZ_DEV }}
      uses: slackapi/slack-github-action@v1.15.0
      with:
        channel-id: q-xyz-cicd
        slack-message: ":octagonal_sign: FAILED"

    - name: Logout from Amazon ECR
      if: always()
      run: |
        docker logout ${{ steps.login-ecr.outputs.registry }}
